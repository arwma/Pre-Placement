Day1: Set Matrix Zeroes
class Solution {
    public void setZeroes(int[][] matrix) {
        int n= matrix.length;
        int m= matrix[0].length;
        boolean row=false;
        boolean col= false;
        for(int i=0;i<n;i++){//checking if there is zero in 1st column
            if(matrix[i][0]==0){
                col= true;
            }
        }
        for(int j=0;j<m;j++){//checking if there is zero in 1st row
            if(matrix[0][j]==0){
                row = true;
            }
        }
        for(int i=1;i<n;i++){//checking for zeroes in rest of the matrix
            for(int j=1;j<m;j++){
               if( matrix[i][j]==0){
                   matrix[0][j]=0;//putting zero in respective row element of 1st row
                   matrix[i][0]=0;//putting zero in respective col element of 1st col
               }
            }
        }
        for(int i=1;i<n;i++){//checkinhg if there is zero in 1st  col
            if(matrix[i][0]==0){
            for(int j=0;j<m;j++){
                matrix[i][j]=0;//putting the zeroes in that row
            }
            }
        }
        for(int j=1;j<m;j++){//checkinhg if there is zero in 1st  row
            if(matrix[0][j]==0){
            for(int i=0;i<n;i++){//putting the zeroes in that col
                matrix[i][j]=0;
            }
            }
        }
        if(row==true){//check if there is zero iin 1st row
            for(int j=0;j<m;j++){
                matrix[0][j]=0;//put zero in 1st row
            }
        }if(col==true){//check if there is zero iin 1st col
            for(int j=0;j<n;j++){
                matrix[j][0]=0;//put zero in 1st col
            }
        }

    }
}

2.Pascal's Triangle
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> ans= new ArrayList<>();
        for(int r=1;r<=numRows;r++){
             ArrayList<Integer> ds= new ArrayList<>();
            for(int c=1;c<=r;c++){
                ds.add(fun(r-1,c-1));
                
            }
             ans.add(new ArrayList<>(ds));
            }
        return ans;
        
    }
    int fun(int r,int c){
        long res=1;
        for(int i=0;i<c;i++){
            res=res*(r-i);
            res=res/(i+1);
        }
        return (int) res;
    }
}

3.Next Permutation
class Solution {
    public void nextPermutation(int[] nums) {
        int n= nums.length;
        int ind=-1;
        for(int i=n-2;i>=0;i--){
            if(nums[i]<nums[i+1]){
            ind=i;
            break;
        }
        }
        if (ind==-1){
        reverse(nums,0,n-1);
        return;}
        for(int i=n-1;i>ind;i--){
            if(nums[i]>nums[ind]){
                int temp=nums[i];
                nums[i]=nums[ind];
                nums[ind]=temp;
                break;
            }
        }
        
reverse(nums,ind+1,n-1);
        
    }
    void reverse(int[]nums,int start,int end){
        

        while (start < end) {
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;

            start++;
            end--;
        }
    }
}

4.Maximum Subarray
class Solution {
    public int maxSubArray(int[] nums) {
        int current=nums[0];
        int maxSum= nums[0];
        for(int i=1;i<nums.length;i++){
            current=Math.max(nums[i],current+nums[i]);
            maxSum=Math.max(maxSum,current);
        }
        return maxSum;
    }
}
5.Sort Colors
class Solution {
    public void sortColors(int[] nums) {
        int low=0;
        int mid=0;
        int high=nums.length-1;
        while(mid<=high){
            
                if(nums[mid]==0){
                    swap(nums,mid,low);
                    mid++;
                    low++;
                }
                else if(nums[mid]==1){
                       mid++;
                }
                else{
                    swap(nums,mid,high);
                   
                    high--;
                }
            
        }

    }
    void swap(int []nums,int i,int j){
        int t=nums[i];
        nums[i]=nums[j];
        nums[j]=t;
    }
}
6.121. Best Time to Buy and Sell Stock
class Solution {
    public int maxProfit(int[] prices) {
       int mini=prices[0];
       int profit=0;
       int n=prices.length;
       for(int i=1;i<n;i++){
           int cost=prices[i]-mini;
           profit=Math.max(cost,profit);
           mini=Math.min(mini,prices[i]);
           
       } 
       return profit;
    }
}

Day2
Rotate Image
class Solution {
    public void rotate(int[][] matrix) {
        int n= matrix.length;
      // transpose of matrix
      for(int i=0;i<n;i++){
          for(int j=0;j<i;j++){
              int temp=matrix[i][j];
               matrix[i][j]= matrix[j][i];
              matrix[j][i]= temp;

          }

      }// for reversing the row
      for(int i=0;i<n;i++){
      int left =0;
      int right= n-1;
      while(left<right){
          int temp= matrix[i][left];
          matrix[i][left]= matrix[i][right];
          matrix[i][right]= temp;
          left++;
          right--;
      }
    }
    }
}

Merge Intervals
class Solution {
    public int[][] merge(int[][] arr) {
        if(arr.length<=1)
        return arr;
        Arrays.sort(arr, Comparator.comparingInt(i -> i[0]));
        List<int[]> result = new ArrayList<>();
        int[] newinterval= arr[0];
        result.add(newinterval);
        for(int[] interval : arr){
            if(interval[0]<=newinterval[1])
            newinterval[1]=Math.max(newinterval[1],interval[1]);
            else{
                newinterval = interval;
                result.add(newinterval);
            }
        }
        return result.toArray(new int[result.size()][]);
    }
}

 Merge Sorted Array
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i=m-1;
        int j= n-1;
        int k= m+n-1;
        while(i>=0 && j>=0){
            if(nums1[i]>nums2[j]){
                nums1[k]= nums1[i];
                k--;
                i--;
            }
            else{
                nums1[k]= nums2[j];
                k--;
                j--;

            }
        }
        while(i>=0){
            nums1[k]=nums1[i];
            k--;
            i--;
        }
        while(j>=0){
            nums1[k]=nums2[j];
            k--;
            j--;
        }
    }
}


Find the Duplicate Number

class Solution {
    public int findDuplicate(int[] nums) {
        int slow= nums[0];
        int fast= nums[0];
        do{
            slow= nums[slow];
            fast= nums[nums[fast]];
        }
        while(fast!=slow);
        fast= nums[0];
        while(slow!=fast){
            slow= nums[slow];
            fast= nums[fast];
        }
        return slow;
    }
}
Find the repeating and missing numbers



import java.util.*;

public class tUf {

    public static int[] findMissingRepeatingNumbers(int[] a) {
        int n = a.length; // size of the array
        int xr = 0;

        //Step 1: Find XOR of all elements:
        for (int i = 0; i < n; i++) {
            xr = xr ^ a[i];
            xr = xr ^ (i + 1);
        }

        //Step 2: Find the differentiating bit number:
        int number = (xr & ~(xr - 1));

        //Step 3: Group the numbers:
        int zero = 0;
        int one = 0;
        for (int i = 0; i < n; i++) {
            //part of 1 group:
            if ((a[i] & number) != 0) {
                one = one ^ a[i];
            }
            //part of 0 group:
            else {
                zero = zero ^ a[i];
            }
        }

        for (int i = 1; i <= n; i++) {
            //part of 1 group:
            if ((i & number) != 0) {
                one = one ^ i;
            }
            //part of 0 group:
            else {
                zero = zero ^ i;
            }
        }

        // Last step: Identify the numbers:
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (a[i] == zero) cnt++;
        }

        if (cnt == 2) return new int[] {zero, one};
        return new int[] {one, zero};
    }


    public static void main(String[] args) {
        int[] a = {3, 1, 2, 5, 4, 6, 7, 5};
        int[] ans = findMissingRepeatingNumbers(a);
        System.out.println("The repeating and missing numbers are: {"
                           + ans[0] + ", " + ans[1] + "}");
    }
}

Count inversions in an array


import java.util.*;

public class tUf {

    private static int merge(int[] arr, int low, int mid, int high) {
        ArrayList<Integer> temp = new ArrayList<>(); // temporary array
        int left = low;      // starting index of left half of arr
        int right = mid + 1;   // starting index of right half of arr

        //Modification 1: cnt variable to count the pairs:
        int cnt = 0;

        //storing elements in the temporary array in a sorted manner//

        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right]) {
                temp.add(arr[left]);
                left++;
            } else {
                temp.add(arr[right]);
                cnt += (mid - left + 1); //Modification 2
                right++;
            }
        }

        // if elements on the left half are still left //

        while (left <= mid) {
            temp.add(arr[left]);
            left++;
        }

        //  if elements on the right half are still left //
        while (right <= high) {
            temp.add(arr[right]);
            right++;
        }

        // transfering all elements from temporary to arr //
        for (int i = low; i <= high; i++) {
            arr[i] = temp.get(i - low);
        }
        return cnt; // Modification 3
    }

    public static int mergeSort(int[] arr, int low, int high) {
        int cnt = 0;
        if (low >= high) return cnt;
        int mid = (low + high) / 2 ;
        cnt += mergeSort(arr, low, mid);  // left half
        cnt += mergeSort(arr, mid + 1, high); // right half
        cnt += merge(arr, low, mid, high);  // merging sorted halves
        return cnt;
    }

    public static int numberOfInversions(int[] a, int n) {
        // Count the number of pairs:
        return mergeSort(a, 0, n - 1);
    }


    public static void main(String[] args) {
        int[] a = {5, 4, 3, 2, 1};
        int n = 5;
        int cnt = numberOfInversions(a, n);
        System.out.println("The number of inversions are: " + cnt);
    }
}

DAy 3

Search in a sorted 2D matrix
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int lo = 0;
        if(matrix.length == 0) return false;
        int n = matrix.length; 
        int m = matrix[0].length; 
        int hi = (n * m) - 1;
        
        while(lo <= hi) {
            int mid = (lo + (hi - lo) / 2);
            if(matrix[mid/m][mid % m] == target) {
                return true;
            }
            if(matrix[mid/m][mid % m] < target) {
                lo = mid + 1;
            }
            else {
                hi = mid - 1;
            }
        }
        return false;
    }
Pow(x, n)
class Solution {
    public double myPow(double x, int n) {

        // Check if x is within the given constraints
        if (x < -10000 || x > 10000) {
            return 0;
        }
        
        // Base condition: If n is 0, x^0 is 1
        if (n == 0) {
            return 1;
        }

        // If n is negative, take the reciprocal of x and make n positive
        if (n < 0) {
            n = -n;
            x = 1 / x;
        }

        // If n is even, recursively compute the square of x^(n/2)
        if (n % 2 == 0) {
            return myPow(x * x, n / 2);
        } 
        
        // If n is odd, recursively compute x^(n-1) and multiply it by x
        else {
            return x * myPow(x, n - 1);
        }
    }
}
 Majority Element

class Solution {
    public int majorityElement(int[] nums) {
        int ansIndex=nums[0];
        int count=1;
        
        for(int i=1;i<nums.length;i++){
            
             if(nums[i]== ansIndex){
                 count++;
             }
             else
             {
                 count--;
             }
             if(count==0){
                 ansIndex=nums[i];
                count =1;
             }
             
        }
        return ansIndex;
    }
}
Majority Element II
class Solution {
    public List<Integer> majorityElement(int[] nums) {
     int n1=-1;
     int n2=-2;
     int c1=0;
     int c2=0;
     int n= nums.length;
     for(int i=0;i<n;i++){
        
          if(nums[i]==n1){
             c1++;
         }
         else if(nums[i]==n2) {
             c2++;
         }
          else if(c1==0){
             n1= nums[i];
             c1++;

         }
         else if(c2==0){
             n2= nums[i];
             c2++;
         }
         else{
             c1--;
             c2--;
         }
     }  
   List<Integer> ans = new ArrayList<>();
   int mini = (int)n/3 +1;
   c1=0; c2=0;
   for(int k=0;k<n;k++){
       if(n1==nums[k]) c1++;
       if(n2==nums[k]) c2++;}
       if(c1>=mini) ans.add(n1);
       if(c2>= mini) ans.add(n2);
   
   return ans;
    }
}

Day 4
Two Sum
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int []ans= new int[2];
        ans[0]=-1;
        ans[1]=-1;
        HashMap<Integer,Integer> mpp= new HashMap<>();
        for(int i=0;i<nums.length;i++){
        
            int moreneeded= target-nums[i];
            if(mpp.containsKey(moreneeded)){
                ans[0]=mpp.get(moreneeded);
                ans[1]=i;
                
            }
            mpp.put(nums[i],i);
        }
     return ans;
    }
}


4 sum


class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        int n=nums.length;
        List<List<Integer>> ans= new ArrayList<>();
        for(int i=0;i<n;i++){
            if(i>0&& nums[i]==nums[i-1])continue;
            for(int j=i+1;j<n;j++){
                if(j!=i+1 && nums[j]==nums[j-1])continue;
                int k=j+1;
                int l=n-1;
                while(k<l){
                long sum=(long)nums[i]+nums[j]+nums[k]+nums[l];
                if(sum==target){
                    List<Integer> list= new ArrayList<>();
                    list.add(nums[i]);
                    list.add(nums[j]);
                    list.add(nums[k]);
                    list.add(nums[l]);
                    ans.add(list);
                 while(k<l && nums[l]==nums[l-1]){l--;}
                    while(k<l && nums[k]==nums[k+1]){k++;}
                    l--;
                    k++;
                    
                }
                if(sum<target){
                    k++;
                }
                else if(sum>target){l--;}
            }
          }
        }
        return ans;
    }
}


 Longest Consecutive Sequence
class Solution {
    public int longestConsecutive(int[] nums) {
        Set<Integer> s= new HashSet<>();
        int max=0;
        for(int i=0;i<nums.length;i++){
            int num=nums[i];
            s.add(num);
        }
        for(int j=0;j<nums.length;j++){
            int n= nums[j];
            if(!s.contains(n-1)){
               int currentn= n;
               int count=1;
               while(s.contains(currentn+1)){
                   currentn +=1;
                   count++;
               }
               max=Math.max(max,count);
            }
        }
        return max;
    }
}

Largest subarray with 0 sum




int maxLen(int A[], int n)
    {
        // Your code here
        HashMap<Integer, Integer> mpp = new HashMap<Integer, Integer>();

        int maxi = 0;
        int sum = 0; 

        for(int i = 0;i<n;i++) {

            sum += A[i]; 

            if(sum == 0) {
                maxi = i + 1; 
            }
            else {
                if(mpp.get(sum) != null) {

                    maxi = Math.max(maxi, i - mpp.get(sum)); 
                }
                else {

                    mpp.put(sum, i); 
                }
            }
        }
        return maxi; 
    }

Length of Longest Substring without any Repeating Character

import java.util.*;
public class Main {
    static int solve(String str) {

        if(str.length()==0)
             return 0;
        int maxans = Integer.MIN_VALUE;
        for (int i = 0; i < str.length(); i++) // outer loop for traversing the string
        {
            Set < Character > se = new HashSet < > ();
            for (int j = i; j < str.length(); j++) // nested loop for getting different 
            string starting with str[i]
            {
                if (se.contains(str.charAt(j))) // if element if found so mark it as ans 
                and break from the loop
                {
                    maxans = Math.max(maxans, j - i);
                    break;
                }
                se.add(str.charAt(j));
            }
        }
        return maxans;
    }
